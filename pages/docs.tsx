import { GetStaticProps, NextPage } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import fs from 'fs'
import markdownToHtml from "zenn-markdown-html";
import { JSDOM } from 'jsdom'
import styles from '../styles/Home.module.css'

type TableOfContent = {
  level: string,
  title: string,
  href: string,
}

type DocsProps = {
  html: string,
  tableOfContent: TableOfContent[]
}

export const getStaticProps: GetStaticProps = async ({ locale }) => {
  const mds = fs.readdirSync('markdown')
  const content = fs.readFileSync(`markdown/${mds[0]}`, 'utf-8')
  const htmlContent = markdownToHtml(content)
  const domHtml = new JSDOM(htmlContent).window.document

  const elements = domHtml.querySelectorAll<HTMLElement>("h2")
  const tableOfContent: TableOfContent[] = []
  elements.forEach((element) => {
    const level = element.tagName
    const title = element.innerHTML.split("</a> ")[1]
    const href = element.id
    tableOfContent.push({ level: level, title: title, href: href })
  })

  return {
    props: {
      ...(await serverSideTranslations(locale!, ['common'])),
      html: htmlContent,
      tableOfContent: tableOfContent
    }
  }
}

const Docs: NextPage<DocsProps> = ({ html, tableOfContent }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div 
          dangerouslySetInnerHTML={{ __html: html }}
        />
        <div>
          <h4>Table of Contents</h4>
          {tableOfContent.map((elm: TableOfContent) => {
            return <li key={elm.href}>
              <a href={elm.href}>{ elm.title }</a>
            </li>
          })}
        </div>
      </main>
    </div>
  )
}

export default Docs
